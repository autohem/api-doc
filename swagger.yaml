swagger: "2.0"
info:
  description: "Basic API to remote control and get status from an AC equipment"
  version: "1.0.0"
  title: "AC Control API"
  #termsOfService: "http://swagger.io/terms/"
  contact:
    email: "oliveira.gui5@gmail.com"
  license:
    name: "License MIT"
    url: "https://opensource.org/licenses/MIT"
host: "autohem.github.io"
basePath: "/api-doc"
tags:
- name: "ac"
  description: "Airconditioner control"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/autohem"
#- name: "user"
#  description: "Operations about user"
#  externalDocs:
#    description: "Find out more about our store"
#    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /ac:
    post:
      tags:
      - "ac"
      summary: "Set the AC status"
      description: ""
      operationId: "setStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "AC status"
        required: true
        schema:
          $ref: "#/definitions/Ac"
      responses:
        "403":
          description: Forbiden
        "405":
          description: "Invalid input"
        "202":
          description: "Accepted"
      security:
      - petstore_auth:
        - "write:ac"
        - "read:ac"
    get:
      tags:
      - "ac"
      summary: "Get The AC Status"
      description: ""
      operationId: "getStatus"
      produces:
      - "application/json"
      responses:
        "403":
          description: Forbiden
        "200":
          description: OK
          schema:
             $ref: "#/definitions/Ac"
      security:
      - petstore_auth:
        - "write:ac"
        - "read:ac"
  #/user:
  #  post:
  #    tags:
  #    - "user"
  #    summary: "Create user"
  #    description: "This can only be done by the logged in user."
  #    operationId: "createUser"
  #    produces:
  #    - "application/xml"
  #    - "application/json"
  #    parameters:
  #    - in: "body"
  #      name: "body"
  #      description: "Created user object"
  #      required: true
  #      schema:
  #        $ref: "#/definitions/User"
  #    responses:
  #      default:
  #        description: "successful operation"
  #/user/createWithArray:
#  post:
#    tags:
#    - "user"
#    summary: "Creates list of users with given input array"
#    description: ""
#    operationId: "createUsersWithArrayInput"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - in: "body"
#      name: "body"
#      description: "List of user object"
#      required: true
#      schema:
#        type: "array"
#        items:
#          $ref: "#/definitions/User"
#    responses:
#      default:
#        description: "successful operation"
##/user/createWithList:
#  post:
#    tags:
#    - "user"
#    summary: "Creates list of users with given input array"
#    description: ""
#    operationId: "createUsersWithListInput"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - in: "body"
#      name: "body"
#      description: "List of user object"
#      required: true
#      schema:
#        type: "array"
#        items:
#          $ref: "#/definitions/User"
#    responses:
#      default:
#        description: "successful operation"
##/user/login:
#  get:
#    tags:
#    - "user"
#    summary: "Logs user into the system"
#    description: ""
#    operationId: "loginUser"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - name: "username"
#      in: "query"
#      description: "The user name for login"
#      required: true
#      type: "string"
#    - name: "password"
#      in: "query"
#      description: "The password for login in clear text"
#      required: true
#      type: "string"
#    responses:
#      "200":
#        description: "successful operation"
#        schema:
#          type: "string"
#        headers:
#          X-Rate-Limit:
#            type: "integer"
#            format: "int32"
#            description: "calls per hour allowed by the user"
#          X-Expires-After:
#            type: "string"
#            format: "date-time"
#            description: "date in UTC when token expires"
#      "400":
#        description: "Invalid username/password supplied"
##/user/logout:
#  get:
#    tags:
#    - "user"
#    summary: "Logs out current logged in user session"
#    description: ""
#    operationId: "logoutUser"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters: []
#    responses:
#      default:
#        description: "successful operation"
##/user/{username}:
#  get:
#    tags:
#    - "user"
#    summary: "Get user by user name"
#    description: ""
#    operationId: "getUserByName"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - name: "username"
#      in: "path"
#      description: "The name that needs to be fetched. Use user1 for testing. "
#      required: true
#      type: "string"
#    responses:
#      "200":
#        description: "successful operation"
#        schema:
#          $ref: "#/definitions/User"
#      "400":
#        description: "Invalid username supplied"
#      "404":
#        description: "User not found"
#  put:
#    tags:
#    - "user"
#    summary: "Updated user"
#    description: "This can only be done by the logged in user."
#    operationId: "updateUser"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - name: "username"
#      in: "path"
#      description: "name that need to be updated"
#      required: true
#      type: "string"
#    - in: "body"
#      name: "body"
#      description: "Updated user object"
#      required: true
#      schema:
#        $ref: "#/definitions/User"
#    responses:
#      "400":
#        description: "Invalid user supplied"
#      "404":
#        description: "User not found"
#  delete:
#    tags:
#    - "user"
#    summary: "Delete user"
#    description: "This can only be done by the logged in user."
#    operationId: "deleteUser"
#    produces:
#    - "application/xml"
#    - "application/json"
#    parameters:
#    - name: "username"
#      in: "path"
#      description: "The name that needs to be deleted"
#      required: true
#      type: "string"
#    responses:
#      "400":
#        description: "Invalid username supplied"
#      "404":
#        description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://autohem.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:ac: "modify ac state"
      read:ac: "read ac state"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
#  User:
#    type: "object"
#    properties:
#      id:
#        type: "integer"
#        format: "int64"
#      username:
#        type: "string"
#      firstName:
#        type: "string"
#      lastName:
#        type: "string"
#      email:
#        type: "string"
#      password:
#        type: "string"
#      phone:
#        type: "string"
#      userStatus:
#        type: "integer"
#        format: "int32"
#        description: "User Status"
#    xml:
#      name: "User"
  Ac:
    type: "object"
    required:
    - "state"
    - "fan"
    - "command"
    - "temperature"
    properties:
      state:
        type: "string"
        enum: [on, off]
        description: >
          State Possibilities:
            * `on` - Turn on the AC
            * `off` - Turn off the AC
        example: on
      fan:
        type: "string"
        example: "auto"
        enum: [auto, low, med, high, off]
        description: >
          Fan Possibilities:
            * `auto` - Fan auto speed
            * `low` - Fan low speed
            * `med` - Fan medium speed
            * `high` - Fan high speed
            * `off` - Fan off
        
      command:
        type: "string"
        example: "cool"
        enum: [cool, heat, auto, fan]
        description: >
          Command Possibilities:
            * `cool` - cool mode
            * `heat` -  heat mode
            * `auto` - auto mode
            * `fan` - only fan mode
      temperature:
        type: integer
        minimum: 17
        maximum: 30
        example: 23
#  ApiResponse:
#    type: "object"
#    properties:
#      code:
#        type: "integer"
#        format: "int32"
#      type:
#        type: "string"
#      message:
#        type: "string"#
